var documenterSearchIndex = {"docs":
[{"location":"multi-file-programs/#Multi-File-Programs-1","page":"Multi-File Programs","title":"Multi-File Programs","text":"","category":"section"},{"location":"multi-file-programs/#","page":"Multi-File Programs","title":"Multi-File Programs","text":"In Limon, run keyword can be used to evaluate code in another in the scope it is invoked.","category":"page"},{"location":"multi-file-programs/#","page":"Multi-File Programs","title":"Multi-File Programs","text":"$ cat > hello.lmn\ndef hello = @() { [println_str \"Hello World!\"] }\n\n$ limon\n\nlimon> [run \"hello.lmn\"]\n#<procedure>\n\nlimon> [hello]\nHello World!\n#<true>","category":"page"},{"location":"multi-file-programs/#","page":"Multi-File Programs","title":"Multi-File Programs","text":"run can be used anywhere in a Limon program, such as inside scope expression or inside procedures. If run is evaluated in a new scope, definitions inside the evaluated file won't be visible to outside. This can be useful if all the environment of evaluated file is only needed in a limited portion of the program.","category":"page"},{"location":"multi-file-programs/#","page":"Multi-File Programs","title":"Multi-File Programs","text":"limon> {\n         [run \"hello.lmn\"]\n         [hello]\n       }\nHello World!\n#<true>\n\nlimon> hello\n\nInternal Limon Exception: Variable 'hello' not defined\nLocation: 'REPL' between lines 1-1, columns 1-6\n\nError while running command.","category":"page"},{"location":"control-flow/#Control-Flow-1","page":"Control Flow","title":"Control Flow","text":"","category":"section"},{"location":"control-flow/#Compound-Expression-1","page":"Control Flow","title":"Compound Expression","text":"","category":"section"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Compound expression is one or more expressions inside parenthesis.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> [println (def a = 5\n                 [# a a+1 a+2])]\n[# 5 6 7]\n#<null>","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Precedence of mathematical operations can be achieved by putting the precedent operation inside the compound expression.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> (1 + 4) * 2\n10","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Note that expressions in the compound expression are evaluated without creating a new scope. If a new scope is desired scope expression should be used.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> [println {def a = 5\n                 [# a a+1 a+2]}]\n[# 5 6 7]\n#<null>\n\nlimon> a\n\nInternal Limon Exception: Variable 'a' not defined\n...","category":"page"},{"location":"control-flow/#Conditional-Evaluation-1","page":"Control Flow","title":"Conditional Evaluation","text":"","category":"section"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Conditional evaluation can be achieved with the language structure (expression_1 ? expression_2 : expression_3).","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> (true ? 1 : 2)\n1\n\nlimon> (false ? 1 : 2)\n2","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"More than one condition can be stated. The following expressions are identical. ","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> def a = 2\n2\n\nlimon> (a == 1 ? :one\n        a == 2 ? :two\n        a == 3 ? :tree\n        : :none)\n:two\n\nlimon> (a == 1 ? :one\n        : (a == 2 ? :two\n           : (a == 3 ? :three\n              : :none)))\n:two","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"expression_3 (the expression after :) can be omitted. In this case, if all the conditions evaluate to false, null is returned.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> a = 4\n4\n\nlimon> (a == 1 ? :one\n        a == 2 ? :two\n        a == 3 ? :tree)\n#<null>","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Note that all three expressions (exp1 ? exp2 : exp3) are expressions, not expression lists. So to run multiple expressions, use compound or scope expression.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> (first ? (\n          def size = 2\n          [# size]\n        ) : (\n          def size = 3\n          [# size]\n        )\n       )\n[# 2]\n\nlimon> (first ? {\n          def size = 2\n          [# size]\n        } : {\n          def size = 3\n          [# size]\n        }\n       )\n[# 2]","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Note that there is no short-circuit evaluation. All expressions of a boolean operation are evaluated. ","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> def say = @() { [println_str \"Hey!\"] true }\n#<procedure>\n\nlimon> ([say] & [say] ? :this : :that)\nHey!\nHey!\n:this","category":"page"},{"location":"control-flow/#Repeated-Evaluation-1","page":"Control Flow","title":"Repeated Evaluation","text":"","category":"section"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"In Limon, there are no built-in language structures explicitly for repeated evaluation. However, this can be achieved by recursive procedure calls.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> def do_range = @(i n f) {\n         (i != n ? (\n           [f i]\n           [do_range i+1 n f]\n         ))\n       }\n#<procedure>\n\nlimon> [do_range 0 4 println]\n0\n1\n2\n3\n#<null>","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Check Procedures for more details on performance and memory usage.","category":"page"},{"location":"control-flow/#Exception-Handling-1","page":"Control Flow","title":"Exception Handling","text":"","category":"section"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"Limon exceptions can be raised with raise keyword. They can be caught by try-catch language structure.","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> def divide = @(n1 n2) {\n         (n2 == 0 ? [raise :division_by_zero_exception]\n          : n1 / n2)\n       }\n#<procedure>\n\nlimon> [divide 3 0]\nUncaught exception: :division_by_zero_exception\n\nError while running command.\n\nlimon> try {\n         [divide 3 0]\n       } catch (exc) {\n         [print_str \"In catch clause with exception \"]\n         [println exc]\n       }\nIn catch clause with exception :division_by_zero_exception\n#<null>\n\nlimon> try {\n         [divide 3 2]\n       } catch (exc) {\n         [print_str \"In catch clause with exception \"]\n         [println exc]\n       }\n1","category":"page"},{"location":"control-flow/#","page":"Control Flow","title":"Control Flow","text":"limon> def is_a_defined = try {\n         a\n         true\n       } catch (e) {\n         false\n       }\n#<false>\n\nlimon> is_a_defined\n#<false>\n\nlimon> def a = 4\n4\n\nlimon> is_a_defined = try {\n         a\n         true\n       } catch (e) {\n         false\n       }\n#<true>\n\nlimon> is_a_defined\n#<true>","category":"page"},{"location":"core/#The-Limon-Core-Language-Documentation-1","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"","category":"section"},{"location":"core/#Expressions-1","page":"The Limon Core Language Documentation","title":"Expressions","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"A Limon program consists of zero or more expressions seperated by whitespaces. Every expression produces a value and the same set of values can be bound to variables. The values generated by expressions except the last one are discarted.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Limon expressed (and denoted) values:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Integer value\nFloating point value\nBoolean value\nCharacter value\nString value\nSymbol value\nProcedure value\nArray value\nNull value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"A variable has a binding at any time; in other words, it cannot be unbound. And it can have bindings of different types at different times.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"In the rest of the documentation, each Limon expression, its grammar, and its examples will be presented. In the grammar notation, identifiers and literals are shown in upper case.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Some of the expressions have a similar symtax as procedure call, ex: [__make_array__ 5]. The keywords used in these expressions have double underscores at the beginning and at the end, __make_array__ in this case. They are wrapped by procedures defined in the Base library without underscores so that they can be used as procedures. The user should use them as follows: [make_array 5].","category":"page"},{"location":"core/#Integer-Expression-1","page":"The Limon Core Language Documentation","title":"Integer Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"A_POSITIVE_INTEGER","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates an integer value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Examples:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"0\n125","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"If a negative integer is desired, unary minus operator must be used:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"(-3)","category":"page"},{"location":"core/#Floating-Point-Expression-1","page":"The Limon Core Language Documentation","title":"Floating Point Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"ZERO_OR_MORE_DIGIT . ONE_OR_MORE_DIGIT","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates a floating point value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"An arbitrary precision may also be specified:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"ZERO_OR_MORE_DIGIT . ONE_OR_MORE_DIGIT p AN_INTEGER","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"The positive integer comming after 'p' is the desired minimum presicion in decimal digits.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Examples:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":".5\n12.7\n12.7p50 // minimum of 50 decimal digits of precision","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Integers and floating point numbers are specified in base 10 by default. However, they can be also specified in binary and hexadecimal formats in the following way:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"// Binary:\n0b1001   // 9\n0b101.1  // 5.5\n\n// Hexadecimal\n0x1A   // 26\n0xA.8  // 10.5","category":"page"},{"location":"core/#Boolean-Expression-1","page":"The Limon Core Language Documentation","title":"Boolean Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"true\nfalse","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates boolean value.","category":"page"},{"location":"core/#String-Expression-1","page":"The Limon Core Language Documentation","title":"String Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"\" RAW_STRING \"","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates a string value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"\"Can Aknesil\\n\"","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Raw-string may contain the following escape sequences:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"\\a : Alert (beep)\n\\b : Backspace\n\\f : Form feed\n\\n : New line\n\\r : Carriage return\n\\t : Horizontal tab\n\\v : Vertical tab\n\\\" : Double quotation mark\n\\ : Backslash\n\\? : Question mark","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Characters can be gotten or set with Array|String Get|Set Expression.","category":"page"},{"location":"core/#Character-Expression-1","page":"The Limon Core Language Documentation","title":"Character Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"' RAW_CHARACTER '","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates a character value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Examples:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"'c'\n'\\n'","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Raw-character may contain the following escape sequences:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"\\a : Alert (beep)\n\\b : Backspace\n\\f : Form feed\n\\n : New line\n\\r : Carriage return\n\\t : Horizontal tab\n\\v : Vertical tab\n\\' : Single quotation mark\n\\ : Backslash\n\\? : Question mark","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"For creating characters from ASCII integer values, casting from an integer value must be performed.","category":"page"},{"location":"core/#Null-Expression-1","page":"The Limon Core Language Documentation","title":"Null Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"null","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates a null value. This type of value represents the absence of value.","category":"page"},{"location":"core/#Variable-Definition-Expression-1","page":"The Limon Core Language Documentation","title":"Variable Definition Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def VARIABLE","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Defines variable and initializes it as a null value. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns null value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def myNum","category":"page"},{"location":"core/#Variable-Assignment-Expression-1","page":"The Limon Core Language Documentation","title":"Variable Assignment Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar: ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"VARIABLE = EXPRESSION","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression and assigns the produced value to variable.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns the assigned value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"myNum = 3","category":"page"},{"location":"core/#Variable-Definition-and-Assignment-Expression-1","page":"The Limon Core Language Documentation","title":"Variable Definition and Assignment Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Variable definition and assignment can also be performed with a single expression.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar: ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def VARIABLE = EXPRESSION","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Defines variable, evaluates expression, and assigns the produced value to the variable.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns the assigned value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def myNum = 3","category":"page"},{"location":"core/#Variable-Expression-1","page":"The Limon Core Language Documentation","title":"Variable Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar: ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"VARIABLE","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns the binding of variable.","category":"page"},{"location":"core/#Print-Expression-1","page":"The Limon Core Language Documentation","title":"Print Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"!!! Note: This will be reimplemented in the Base library !!!","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar: ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[print EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression and prints its value to standart output. All the values are printable. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns the printed value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[print 1 + 3]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"4","category":"page"},{"location":"core/#Scan-Expression-1","page":"The Limon Core Language Documentation","title":"Scan Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"!!! Note: This will be reimplemented in the Base library !!!","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[scan]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Scans a token from standart input until a whitespace.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns the scaned string as a string value. If encounters the end of file, returns empty string: \"\". ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[print \"Enter a word. I will duplicate it: \"]\ndef word = [scan]\n\n[print word + word + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Enter a word. I will duplicate it: Zambak\nZambakZambak","category":"page"},{"location":"core/#Conditional-Expression-1","page":"The Limon Core Language Documentation","title":"Conditional Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar: ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"( EXPRESSION1 ? EXPRESSION2 : EXPRESSION3 )","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression1. If it produces true, evaluates expression2 and returns its value. If false, evaluates expression3 and returns its value.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 1:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def n = 1\n[print (n == 1 ? \"This is One\" : \"This is not One\") + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"This is One","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Expression3 may not specified:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"( EXPRESSION1 ? EXPRESSION2 )","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"In this case, if expression1 produces false, null value is returned. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 2:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def n = 2\n[print (n == 1 ? \"This is One\") + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"#<null>","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Conditional expression can also be used with multiple consecutive conditions:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"( EXPRESSION ? EXPRESSION\n  ...\n  EXPRESSION ? EXPRESSION\n  : EXPRESSION )","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Or:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"( EXPRESSION ? EXPRESSION\n  ...\n  EXPRESSION ? EXPRESSION )","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"In this case, the value of the correspondent of the first predicate that produces true is returned.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 3:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def msg = \"msg-b\"\n\ndef m\n(msg == \"msg-a\" ? m = 1\n msg == \"msg-b\" ? m = 2\n msg == \"msg-c\" ? m = 3\n : m = (-1))\n\n[print m + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"2","category":"page"},{"location":"core/#Array-Constant-Expression-1","page":"The Limon Core Language Documentation","title":"Array Constant Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[# EXPRESSION1 ... ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates specified one or more expression seperated by whitespace and creates an array value with their values. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def favMovies = [#\"Star Wars\" \"Harry Poter\" \"Issiz Adam\"]","category":"page"},{"location":"core/#Empty-Array-Expression-1","page":"The Limon Core Language Documentation","title":"Empty Array Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__make_array__ EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression which produces an integer value N and create an array value with size N. Initializes all the elements to null value.","category":"page"},{"location":"core/#ArrayString-Get-Expression-1","page":"The Limon Core Language Documentation","title":"Array|String Get Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[# EXPRESSION1 EXPRESSION2 ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression1 which produces an array value or a string value. Evaluates expression2 which produces an integer value N. Returns the N'th element|character of the array|string.","category":"page"},{"location":"core/#ArrayString-Set-Expression-1","page":"The Limon Core Language Documentation","title":"Array|String Set Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[# EXPRESSION1 EXPRESSION2 EXPRESSION3 ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression1 which produces an array value or a string value. Evaluates expression2 which produces an integer value N. Evaluates expression3 and assigns its value to the N'th element|character of the array|string. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns the assigned value. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 1: Array","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def arr = [#3]\n[#arr 0 \"Can Aknesil\"]\n[#arr 1 \"is\"]\n[#arr 2 \"awesome\"]\n\n[print [#arr 0] + \" \" + [#arr 1] + \" \" + [#arr 2] + \" ;)\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Can Aknesil is awesome ;)","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 2: String","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def name = \"Can\"\n[#name 1 'A']\n[#name 2 'N']\n\n[print name + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"CAN","category":"page"},{"location":"core/#Size-Of-Expression-1","page":"The Limon Core Language Documentation","title":"Size-Of Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__sizeof__ EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression which produces an array value or a string value. Returns size of the array|string. ","category":"page"},{"location":"core/#Procedure-Expression-1","page":"The Limon Core Language Documentation","title":"Procedure Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"@ ( PATAMETER_LIST ) { EXPRESSION ... }","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Creates a procedure value. Parameter-list is a list of zero or more identifiers seperated by whitespaces. The body consists of one or more expressions seperated by whitespaces. When the procedure is called, all the expressions in the body are evaluated in order and the value of the last one is returned.","category":"page"},{"location":"core/#Call-Expression-1","page":"The Limon Core Language Documentation","title":"Call Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[ EXPRESSION1 EXPRESSION2 ... ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression1 that produces a procedure value. Evaluates following zero or more expression which are the arguments to the procedure. Calls the procedure with the arguments. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 1: Anonymous procedures","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[print [@(n) { n * n } 12] + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"144","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 2:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def count = 0\ndef next = @() {\n    count += 1\n}\n\n[print [next] + \"\\n\"]\n[print [next] + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"1\n2","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 3: Higher-order procedures","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def createPoint = @(_x _y) {\n    def x = _x\n    def y = _y\n\n    def error = @() {\n        [print \"No Method Error\\n\"]\n    }\n\n    @(msg) {\n        (msg == \"getX\" ? @() { x }\n         msg == \"getY\" ? @() { y }\n         msg == \"setX\" ? @(_x) { x = _x }\n         msg == \"setY\" ? @(_y) { y = _y }\n         : [error] )\n    }\n}\n\ndef aPoint = [createPoint 1 2]\n\n[print [[aPoint \"getX\"]] + \"\\n\"]\n[print [[aPoint \"getY\"]] + \"\\n\"]\n\n[[aPoint \"setX\"] 3]\n[[aPoint \"setY\"] 4]\n\n[print [[aPoint \"getX\"]] + \"\\n\"]\n[print [[aPoint \"getY\"]] + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"1\n2\n3\n4","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 4: Recursive procedures","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def sum = @(array from to) {\n    (from == to ? [#array from]\n    : [#array from] + [sum array from+1 to])\n}\n\ndef myArray = {#1 2 3}\n[print [sum myArray 0 [sizeof myArray] - 1] + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"6","category":"page"},{"location":"core/#Multiple-Expression-Expression-1","page":"The Limon Core Language Documentation","title":"Multiple-Expression Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"( EXPRESSION ... )","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates specified one or more expression in order and returns the value of the last one.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Can be used where multiple expressions are needed:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def a def b\ndef pred = true\n\n(pred ? (\n    a = \"The predicate is true\"\n    b = 1\n) : (\n    a = \"The predicate is false\"\n    b = 2\n))","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Can also be used to define precedence:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[print (2 + 3) * 5]\n[print \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"25","category":"page"},{"location":"core/#Scope-Expression-1","page":"The Limon Core Language Documentation","title":"Scope Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"{ EXPRESSION ... }","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Same as Multiple-Expression Expression except that scope expression evaluates its body in a new variable scope. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 1:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def a = 1\n{\n    def a = 3\n    [print a + \"\\n\"]\n}","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"3","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example 2:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def pred = true\n\n(pred ? {\n    def a = \"The predicate is true\"\n    [print a + \"\\n\"]\n} : {\n    def a = \"The predicate is false\"\n    [print a + \"\\n\"]\n})","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"The predicate is true","category":"page"},{"location":"core/#While-Expression-1","page":"The Limon Core Language Documentation","title":"While Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"(while EXPRESSION1 ? EXPRESSION2 )","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression1 which procudes a boolean value. If it is true, expression2 is evaluated. This is repeted while expression1 procudes true. If expression1 produces false one time, the last value produced by expression2 is returned. If expression1 produces false in the first time, null value is returned. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def i = 0\n(while i < 3 ? (\n    [print i + \" \"]\n    i += 1\n))","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"0 1 2","category":"page"},{"location":"core/#String-Cast-Expression-1","page":"The Limon Core Language Documentation","title":"String Cast Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__2str__ EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression. Convert its value to string value. It is the same string that is printed if print expression were used. Every type of value can be casted to string.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def str = [__2str__ 12] + [2str 8]\n[print str + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"128","category":"page"},{"location":"core/#Character-Cast-Expression-1","page":"The Limon Core Language Documentation","title":"Character Cast Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__2char__ EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression which should produces an integer value N. Returns character value corresponding to the ASCII value N. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"def c = [__2char__ 0x41]\n[print c + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"A","category":"page"},{"location":"core/#Integer-Cast-Expression-1","page":"The Limon Core Language Documentation","title":"Integer Cast Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__2int__ EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evalutes expression. If it produces a character value, returns the corresponding ASCII value; a floating point value, returns an integer value removing its part after the dot. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Examples:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[print [__2int__ 'A'] + \"\\n\"]\n[print [__2int__ 5.2] + \"\\n\"]\n[print [__2int__ (-3.12)] + \"\\n\"]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"65\n5\n-3","category":"page"},{"location":"core/#Floating-Point-Cast-Expression-1","page":"The Limon Core Language Documentation","title":"Floating Point Cast Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__2float__ EXPRESSION]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression which produces an integer value and returns its floating point value version. ","category":"page"},{"location":"core/#Unary-and-Binary-Operation-Expressions-1","page":"The Limon Core Language Documentation","title":"Unary and Binary Operation Expressions","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammer:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"EXPRESSION1 + EXPRESSION2   // Addition\nEXPRESSION1 - EXPRESSION2   // Substraction\nEXPRESSION1 * EXPRESSION2   // Multiplication\nEXPRESSION1 / EXPRESSION2   // Division\nEXPRESSION1 % EXPRESSION2   // Remainder\n\nEXPRESSION1 == EXPRESSION2  // Equal?\nEXPRESSION1 != EXPRESSION2  // Not equal?\nEXPRESSION1 < EXPRESSION2   // Lower than?\nEXPRESSION1 > EXPRESSION2   // Greater than?\nEXPRESSION1 <= EXPRESSION2  // Lower than or equal?\nEXPRESSION1 >= EXPRESSION2  // Greater than or equal?\n\nEXPRESSION1 & EXPRESSION2   // And\nEXPRESSION1 | EXPRESSION2   // Or\n\n( - EXPRESSION )            // Unary minus\n! EXPRESSION                // Not","category":"page"},{"location":"core/#Short-hand-Operation-and-Assignemts-1","page":"The Limon Core Language Documentation","title":"Short-hand Operation and Assignemts","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"A binary operation and variable assignment can be done in a single expression:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammer:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"VAR += EXPRESSION\nVAR -= EXPRESSION\nVAR *= EXPRESSION\nVAR /= EXPRESSION\nVAR %= EXPRESSION\nVAR &= EXPRESSION\nVAR |= EXPRESSION","category":"page"},{"location":"core/#Operator-Precedeuce-and-Associativity-1","page":"The Limon Core Language Documentation","title":"Operator Precedeuce and Associativity","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"From higher precedence to lower (associativity in paranthesis):","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Unary minus (right)\n* , / , % (left)\n+ , - (left)\n< , > , <= , >= , == , != (left)\n! (right)\n& (left)\n| (left)\n= , += , -= , *= , /= , %= , &= , |= (right)","category":"page"},{"location":"core/#Unary-and-Binary-Operations-Typing-and-Details-1","page":"The Limon Core Language Documentation","title":"Unary and Binary Operations Typing & Details","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Addition:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Note: All addition operations produces same type of values also in reverse order (\"1 + 2\" and \"2 + 1\")","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"string value + any value -> string value (Concatenation)\ninteger value + integer value -> integer value\ninteger value + character value -> character value\ncharacter value + character value -> string value (Concatenation)\nfloating point value + floating point value -> floating point value\nfloating point value + integer value -> floating point value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Substraction:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"integer value - integer value -> integer value\ncharacter value - integer value -> character value\ncharacter value - character value -> integer value\nfloating point value - floating point value -> floating point value\nfloating point value - integer value -> floating point value\ninteger value - floating point value -> floating point value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Multiplication & Division:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Note: All addition operations produces same type of values also in reverse order (\"1 * 2\" and \"2 * 1\")","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"integer value * integer value -> integer value\nfloating point value * floating point value -> floating point value\nfloating point value * integer value -> floating point value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Remainder:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"integer value % integer value -> integer value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Equal? & Not equal?:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Equal? operation checks if the inputs are of the same type. If different, returns directly false. If same, checks contents. For array value, all the elements are compared. Every procedure value are considered different by default unless they are the same value. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"any value == any value -> boolean value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Lower than & Greater than & Lower than or equal? & Greater than or equal?:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"interger value < integer value -> boolean value\nstring value < string value -> boolean value\ncharacter value < character value -> boolean value\nfloating point value < floating point value -> boolean value\ninterger value < floating point value -> boolean value\nfloating point value < integer value -> boolean value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"And & Or:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"boolaen value & boolean value -> boolean value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Unary Minus:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"- integer value -> integer value\n- floating point value -> floating point value","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Not:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"! boolean value -> boolean value","category":"page"},{"location":"core/#Run-Expression-1","page":"The Limon Core Language Documentation","title":"Run Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[run STRING ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates the Limon program in another file specified by string in the same environment the expression is evaluated. Returns the last expression that is evaluated in the file. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"// io.lmn\ndef println = @(a) {\n    [print a + \"\\n\"]\n}\n\n// main.lmn\n[run \"io.lmn\"]\n[println \"Can\"]","category":"page"},{"location":"core/#Error-Expression-1","page":"The Limon Core Language Documentation","title":"Error Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[ error EXPRESSION ]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression, displays it as an error message along side the information about where it is invoked, and stops the execution. If in REPL, stops the execution of the current expression and waits for the next one. The part of the evaluation before the error is not reversed!.","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"([valuetype input] != :integer ?\n [error \"Input is not an integer.\"])","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Error while evaluation in file \"REPL\" at Line 1: Input is not an integer.","category":"page"},{"location":"core/#Value-Type-Expression-1","page":"The Limon Core Language Documentation","title":"Value Type Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__valuetype__ EXPRESSION]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression, returns the type of the resulting value as a symbol. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Symbol representations of Limon values:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Integer value => :integer\nFloating point value => :float\nBoolean value => :bool\nCharacter value => :char\nString value => :string\nSymbol value => :symbol\nProcedure value => :procedure\nArray value => :array\nNull value => :null","category":"page"},{"location":"core/#Gensym-Expression-1","page":"The Limon Core Language Documentation","title":"Gensym Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__gensym__]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Returns a unique symbol that cannot be regenerated. They start with # character, which users cannot put to the beginning of their symbols, after the semicolon. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__gensym__]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Output:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":":#132","category":"page"},{"location":"core/#Same-Expression-1","page":"The Limon Core Language Documentation","title":"Same Expression","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"[__same__ EXPRESSION1 EXPRESSION2]","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Evaluates expression1 and expression2, check if the resulting values are the same. Returns a boolean value. ","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Example:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"1 == 1         // true\n[__same__ 1 1] // false\n\ndef a = 1\ndef b = a\n[__same__ a b] // true","category":"page"},{"location":"core/#Comments-1","page":"The Limon Core Language Documentation","title":"Comments","text":"","category":"section"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"Grammar:","category":"page"},{"location":"core/#","page":"The Limon Core Language Documentation","title":"The Limon Core Language Documentation","text":"// ONE LINE COMMENT\n/* MULTI-LINE COMMENT */","category":"page"},{"location":"strings/#Strings-1","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"strings/#","page":"Strings","title":"Strings","text":"There is no built-in string value in Limon. Strings are implemented as array of characters. That's why, manipulation of strings is achieved by procedure specially implemented for strings, such as print_str and is_string. ","category":"page"},{"location":"strings/#","page":"Strings","title":"Strings","text":"Procedures manipulating strings are implemented in the Base library. In string.lmn. ","category":"page"},{"location":"index-page/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"index-page/#","page":"Index","title":"Index","text":"","category":"page"},{"location":"procedures/#Procedures-1","page":"Procedures","title":"Procedures","text":"","category":"section"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"In Limon, procedure values are first-class objects. They are treated like every other value: They can be created inside procedures, can be returned from procedures, can be passed as an argument during a procedure call, can be bound to variables, etc. ","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"All the procedures are anonymous, they don't have names and can be passed around freely.","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"Example:","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"limon> def do_range = @(i n f) {\n         (i != n ? (\n           [f i]\n           [do_range i+1 n f]\n         ))\n       }\n#<procedure>\n\nlimon> [do_range 0 4 println]\n0\n1\n2\n3\n#<null>","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"do_range procedure defined above is an iterative procedure. The recursive call to itself is a tail call, which means there is nothing to do after the call except returning the evaluated value. ","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"In Limon, recursive calls does not grow the stack, iterative calls neither grows the stack, nor grows the control context. This means do_range procedure can be invoked with infinite number of recursion with constant memory usage.","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"This is achieved by the trampolined continuation passing interpreter. ","category":"page"},{"location":"procedures/#","page":"Procedures","title":"Procedures","text":"limon> [do_range 0 40000 @(i) { \n          (i % 10000 == 0 ? [println i])\n       }]\n0\n10000\n20000\n30000\n#<null>","category":"page"},{"location":"math-and-operators/#Math-and-Operators-1","page":"Math and Operators","title":"Math and Operators","text":"","category":"section"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"In Limon, elementary mathematical operations have their own special syntax. Rather than procedure calls, they can be typed in regular mathematical notation.","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"limon> 1 + 3\n4\n\nlimon> (1 + 3) * 2\n8\n\nlimon> 1 + 3 * 2\n7","category":"page"},{"location":"math-and-operators/#Limon-Operators-1","page":"Math and Operators","title":"Limon Operators","text":"","category":"section"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Binary operands with mathematical notation support:","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"+ (addition)\n- (substruction)\n* (multiplication)\n/ (division)\n% (remainder) \n== (equal)\n!= (not equal)\n< (lower than)\n> (greater than)\n<= (lower than or equal)\n>= (greater than or equal)\n& (and)\n| (or)","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Unary operations with mathematical notation support:","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"! (not)\n- (unary minus)","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Important note: Unary minus operation MUST be enclosed by parenthesis. This is to avoid confusion.","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"limon> (-(1 + 3))\n-4","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Short-cut assignment is supported for +, -, *, /, %, &, and |. ","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"limon> def a = 5\n5\n\nlimon> a += 1\n6","category":"page"},{"location":"math-and-operators/#Precedence-and-Associativity-1","page":"Math and Operators","title":"Precedence and Associativity","text":"","category":"section"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Parenthesis, (, ),  can be used to specify precedence. Otherwise, default precedence rules are applied.","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Precedence and associativity (from most precedent to least):","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Operator Associativity\n*, /, % Left\n+, - Left\n<, >, <=, >=, ==, != Left\n! Right\n&, | Left\n=, +=, -=, ... (assignments) Right","category":"page"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"There is no need to define precedence for unary minus since it is always enclosed by parenthesis.","category":"page"},{"location":"math-and-operators/#Operator-Semantics-1","page":"Math and Operators","title":"Operator Semantics","text":"","category":"section"},{"location":"math-and-operators/#","page":"Math and Operators","title":"Math and Operators","text":"Semantic behavior of all the operators (along with many other Limon syntax) are defined in the Base library. So, operator behaviors can be modified or extended by either modifying the Base library, or redefined some procedures defined in the Base library.","category":"page"},{"location":"variables-and-scope/#Variables-and-Scope-1","page":"Variables and Scope","title":"Variables and Scope","text":"","category":"section"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"In Limon, variables are defined with def keyword. ","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def count = 3\n3\n\nlimon> count\n3","category":"page"},{"location":"variables-and-scope/#Properties-of-Limon-Variables-1","page":"Variables and Scope","title":"Properties of Limon Variables","text":"","category":"section"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"Variable names can include digits (0-9), letters (a-z, A-Z) and underscore (_). They cannot start with digits. \nThey do not have types and they can be bound to values of any type (including procedures) during their lives. ","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def count = 4\n4\n\nlimon> count = 2.1\n2.1\n\nlimon> count = true\n#<true>\n\nlimon> count = @(n) { n+1 }\n#<procedure>","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"The same variable can be defined more than one time in the same scope, the second overwriting the first.","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def num = 3\n3\n\nlimon> def num = 4\n4","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"A variable is bound to a value any time. There cannot be a variable without a value bound to it.\nA variable can be defined without initialization. In this case, null value is automatically assigned.","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def to_be_initialized\n#<null>","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"A variable definition or assignment evaluates to the assigned value. ","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def val = (def a = 3)\n3\n\nlimon> val\n3","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"Multiple variables can be assigned directly from an array with the following syntax.","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> (def arr = [# 1 2 3]\n        def a\n        def b\n        def c)\n#<null>\n\nlimon> (...a b c) = arr\n[# 1 2 3]\n\nlimon> a\n1\n\nlimon> b\n2\n\nlimon> c\n3","category":"page"},{"location":"variables-and-scope/#Variable-Scope-1","page":"Variables and Scope","title":"Variable Scope","text":"","category":"section"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"Limon has lexical scoping. ","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"There are 2 structures in Limon that enables creation of a new variable scope: Scope expression and procedures.","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"Scope expression","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def a = :outer\n:outer\n\nlimon> {\n         def a = :inner\n         [println a]\n       }\n:inner\n#<null>\n\nlimon> a\n:outer","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"Scope expression evaluates to the value of the last expression inside the block. In this case, its null that println procedure call returns. ","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"Procedures","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"When called every procedure is evaluated in a new scope where arguments are bound.","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def num = 3\n3\n\nlimon> def inc = @(num) {\n         num += 1\n       }\n#<procedure>\n\nlimon> [inc num]\n4\n\nlimon> num\n3","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"A procedure has access to variables in the scope where it is defined. ","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"limon> def num = 3\n3\n\nlimon> def print_n = @() {\n         [println num]\n       }\n#<procedure>\n\nlimon> [print_n]\n3\n#<null>","category":"page"},{"location":"variables-and-scope/#","page":"Variables and Scope","title":"Variables and Scope","text":"This enables to construct closers, explained in Procedures section. ","category":"page"},{"location":"#Limon-Documentation-1","page":"Home","title":"Limon Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Limon is a high-level, dynamically typed programming language that supports both imperative and functional programming paradigms. It is designed to be elegant, simple, and powerful, without performance constraints. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A notable feature of Limon is infinite recursion without stack overflow. This is achieved by the trampolined continuation passing interpreter.","category":"page"},{"location":"#Getting-Started-1","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Limon REPL (Read Evaluate Print Loop) can be started by invoking limon executable without any parameters.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"$ limon\n\nlimon> 5\n5\n\nlimon> 2 + 3\n5","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pressing enter in the REPL will evaluate the typed expression if syntax is complete. Otherwise, it will let you typing on next lines until the expression is syntactically correct. This way, expressions with multiples lines can be entered.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"limon> 1 +\n       2 +\n       3\n6","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To exit Limon REPL, type CTRL-D. ","category":"page"},{"location":"#Limon-in-General-1","page":"Home","title":"Limon in General","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Limon program consists of zero or more expressions separated by whitespace. Every expression produces a value.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In Limon, there is no C like statements. In programs with more than one expression, the values generated by the expressions except the last one are ignored. The value of the last expression becomes the end-value of the program.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Here is an example with 3 expressions:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"def a=5\na+=2\na","category":"page"},{"location":"#","page":"Home","title":"Home","text":"limon> def a=5 a+=2 a\n7","category":"page"},{"location":"values/#Built-in-Values-1","page":"Built-in Values","title":"Built-in Values","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Limon has the following built-in values:","category":"page"},{"location":"values/#Integer-Value-1","page":"Built-in Values","title":"Integer Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Integer value in Limon can represent integers of arbitrary precision from -infinity to +infinity, without overflow.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> def factorial = @(n) {\n         (n == 0 ? 1 : n * [factorial n-1])\n       }\n#<procedure>\n\nlimon> [factorial 3]\n6\n\nlimon> [factorial 30]\n265252859812191058636308480000000\n\nlimon> [factorial 300]\n306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Integer literals can be binary and hexadecimal:","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> 11 == 0b1011 & 11 == 0xb & 11 == 0xB\n#<true>","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Note: Unary minus operation should be enclosed in parenthesis. This is to prevent syntax confusion. ","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> (-4)\n-4","category":"page"},{"location":"values/#Floating-Point-Value-1","page":"Built-in Values","title":"Floating Point Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Floating values in Limon have 64 bit precision by default. However, 32 and 16 bit precision can be used by extending floating point literals with p32 and p16.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Basic operations on floating point numbers with different precision promote the lower precision one to the higher precision.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> [# def f16 = 1.0p16 / 3.0p16 + 0.0p64\n          def f32 = 1.0p32 / 3.0p32 + 0.0p64\n          def f64 = 1.0p64 / 3.0p64]\n[# 0.333251953125 0.3333333432674408 0.3333333333333333]\n\nlimon> def abs = @(a b) {\n          def diff = a - b\n          diff = (diff > 0.0 ? diff : (-diff))\n       }\n#<procedure>\n\nlimon> [assert [abs f64 f32] < [abs f64 f16]]\n#<true>","category":"page"},{"location":"values/#Character-Value-1","page":"Built-in Values","title":"Character Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Characters can be printed in two ways. print procedure prints the characters as they are. For example '\\n' will be displayed as a real new line. show procedure prints a representation of them for esthetic purposes.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Limon REPL prints characters with show.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> def printchar = @(c) { [print c] [print '\\n'] null }\n#<procedure>\n\nlimon> def showchar = @(c) { [show c] [print '\\n'] null }\n#<procedure>\n\nlimon> [printchar 'a']\na\n#<null>\n\nlimon> [printchar '\\n']\n\n\n#<null>\n\nlimon> [showchar 'a']\n'a'\n#<null>\n\nlimon> [showchar '\\n']\n'\\n'\n#<null>","category":"page"},{"location":"values/#Boolean-Value-1","page":"Built-in Values","title":"Boolean Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> true\n#<true>\n\nlimon> false\n#<false>","category":"page"},{"location":"values/#Symbol-Value-1","page":"Built-in Values","title":"Symbol Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Symbols values can be though as immutable strings. They are generally used to represent names without complexity of strings. ","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Syntax rules for symbols are the same as variables, except there should be one colon : at the beginning.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> def perform_operation = @(op n1 n2) {\n         (op == :addition     ? n1 + n2\n          op == :substruction ? n1 - n2\n          : :op_not_defined)\n       }\n#<procedure>\n\nlimon> [perform_operation :addition 2 3]\n5\n\nlimon> [perform_operation :substruction 2 3]\n-1\n\nlimon> [perform_operation :multiplication 2 3]\n:op_not_defined","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Unique symbols can be defined with gensym procedure. Any identical symbol created using gensym cannot be created.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> [gensym]\n:##253\n\nlimon> [gensym]\n:##254","category":"page"},{"location":"values/#Null-Value-1","page":"Built-in Values","title":"Null Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"In Limon there is no absence of value. Every variable must be bound to a value. Null value can be used to represent the absence of value.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> def increment_if_exists = @(n) {\n         ([valuetype n] != :null ? n+1 : :null_input)\n       }\n#<procedure>\n\nlimon> [increment_if_exists 4]\n5\n\nlimon> [increment_if_exists null]\n:null_input","category":"page"},{"location":"values/#Array-Value-1","page":"Built-in Values","title":"Array Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Arrays, in Limon, provide a way to have a list of values, where access (get and set) to every index has constant time complexity. ","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Once created their size cannot be changed. ","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"One array can store values of different types.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Passing arrays from variable to another does not copy the elements.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"An empty array can be created with make_array procedure. All the indices are automatically set to null.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> [make_array 8]\n[# #<null> #<null> #<null> #<null> #<null> #<null> #<null> #<null>]","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Arrays also can be created with array literal with the following syntax:","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"def info_fields = [# :name :surname :age]\n[# :name :surname :age]","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"sizeof procedure can be used to return size of an array.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> (def arr = [#]\n        [sizeof arr])\n0","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"aget and aset procedures can be used to get and set array fields.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> (def arr1 = [# 1 2]\n        def arr2 = arr1)\n[# 1 2]\n\nlimon> [aset arr1 0 55]\n55\n\nlimon> arr1\n[# 55 2]\n\nlimon> arr2\n[# 55 2]","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> def copy_arr = @(arr) {\n         def size = [sizeof arr]\n         def arr2 = [make_array size]\n         \n         def copy_index = @(idx) {\n           (idx != size ? (\n              [aset arr2 idx [aget arr idx]]\n              [copy_index idx+1]))\n         }\n         [copy_index 0]\n         \n         arr2\n       }\n#<procedure>\n\nlimon> def arr1 = [# 1 1 1]\n[# 1 1 1]\n\nlimon> def arr2 = [copy_arr arr1]\n[# 1 1 1]\n\nlimon> [aset arr1 0 2]\n2\n\nlimon> arr1\n[# 2 1 1]\n\nlimon> arr2\n[# 1 1 1]","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Note: This is not the shortest way to copy an array.","category":"page"},{"location":"values/#Character-Arrays-1","page":"Built-in Values","title":"Character Arrays","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"In Limon, there is no built-in string value. They are represented as array of characters. In the Base library, string functions that operate on arrays of characters are implemented (like print_str).","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> [println \"Limon\"]\n[# 'L' 'i' 'm' 'o' 'n']\n#<null>\n\nlimon> [println_str \"Limon\"]\nLimon\n#<true>\n\nlimon> [valuetype \"Limon\"]\n:array\n\nlimon> [valuetype [aget \"Limon\" 0]]\n:char","category":"page"},{"location":"values/#Procedure-Value-1","page":"Built-in Values","title":"Procedure Value","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"In Limon, procedures can be created with the following syntax: ","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"@( arguments ) { body }","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"arguments are variables names separated with whitespace. body is one or more expressions separated by whitespace.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"The syntax of a procedure call is as follows:","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"[ procedure arguments ]","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"procedure is any expression that will evaluate to a procedure value. arguments are zero or more expressions separated by whitespace.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Some examples:","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> @(a b) { [println a+b] }\n#<procedure>\n\nlimon> [@(a b) { [println a+b] } 4 5]\n9\n#<null>\n\nlimon> (def add = @(a b) { a+b }\n        def sub = @(a b) { a-b })\n#<procedure>\n\nlimon> def apply_op = @(op a b) {\n         [op a b]\n       }\n#<procedure>\n\nlimon> [apply_op add 2 4]\n6\n\nlimon> [apply_op sub 2 4]\n-2","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Check out Procedures for more detail.","category":"page"},{"location":"values/#Value-Type-1","page":"Built-in Values","title":"Value Type","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Types of the values can be learned with valuetype function, which returns a symbol.","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> [valuetype 1]\n:integer\n\nlimon> [valuetype 1.1]\n:float\n\nlimon> [valuetype 'a']\n:char\n\nlimon> [valuetype true]\n:bool\n\nlimon> [valuetype :limon]\n:symbol\n\nlimon> [valuetype null]\n:null\n\nlimon> [valuetype [#]]\n:array\n\nlimon> [valuetype @(){1}]\n:procedure","category":"page"},{"location":"values/#Conversion-1","page":"Built-in Values","title":"Conversion","text":"","category":"section"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"Some values can be converted to others with convert procedure. ","category":"page"},{"location":"values/#","page":"Built-in Values","title":"Built-in Values","text":"limon> [convert 3 :float]\n3.0\n\nlimon> [convert 'a' :integer]\n97\n\nlimon> [convert 3 :float]\n3.0\n\nlimon> def c = [convert 'a' :integer]\n97\n\nlimon> c += 2\n99\n\nlimon> [convert c :char]\n'c'","category":"page"}]
}
